@use 'sass:math';

// App Configuration

$main-window-width: 500px;
$header-height: 50px;

// Animation Configuration

$flip-states: ('absent', 'present', 'correct');
$flip-duration: 250ms;
$flip-duration-halved: math.div($flip-duration, 2);
$slide-in-duration: 200ms;

// CSS Variables

$border-radius: 4px;

$typography: (
  fontSize: 16px,
  fontFamily: ('Lexend', 'Roboto', 'Helvetica', 'Arial', 'sans-serif'),
  fontWeight: (
    light:   300,
    regular: 400,
    medium:  500,
    bold:    700,
    heavy:   900
  )
);

// Palette

$dark-colors: (
  tile: (
    absent:  #3a3a3c,
    present: #ffa726,
    correct: #66bb6a,
    error:   #f443367f,
  ),
  text: (
    primary:   #ffffff,
    faded:     rgba(#ffffff, 0.75),
    secondary: #82868c,
  ),
  background: (
    default: #121213,
    paper:   #818384,
    paper2:  #3a3a3c,
  ),
  misc: (
    divider: rgba(255, 255, 255, .12),
  ),
);

$light-colors: (
  tile: (
    absent:  #dfe1e6,
    present: #ffa726,
    correct: #66bb6a,
    error:   #f443367f,
  ),
  text: (
    primary:   #181818,
    faded:     rgba(#181818, 0.75),
    secondary: #82868c,
  ),
  background: (
    default: #f5f4f3,
    paper:   #787c7e,
    paper2:  #d3d6da,
  ),
  misc: (
    divider: rgba(255, 255, 255, .12),
  ),
);

// Fn to retrieve CSS variables
// Ref: https://codepen.io/jakealbaugh/post/css4-variables-and-sass

@function palette($color-name, $color-variant: null) {
  @if ($color-variant != null) {
    @return var(--#{$color-name}-#{$color-variant});
  } @else {
    @return var(--#{$color-name});
  }
};

// Media queries

$breakpoints: (
  xs: 0px,
  sm: 600px,
  md: 900px,
  lg: 1200px,
  xl: 1536px
);

@mixin bp-down($bp) {
  @media all and (max-width: map-get($breakpoints, $bp)) {
    @content
  };
};

@mixin bp-up($bp) {
  @media all and (min-width: map-get($breakpoints, $bp)) {
    @content
  };
};

@mixin bp-in($lower-bp, $upper-bp) {
  @media all and (min-width: map-get($breakpoints, $lower-bp)) and (max-width: map-get($breakpoints, $upper-bp)) {
    @content
  };
};

// Spacing

@function spacing($top, $right: null, $bottom: null, $left: null) {
  $step: 4px;
  @if $right  == null and $bottom == null and $left == null { @return $top * $step };
  @if $left   == null { $left:   $right };
  @if $bottom == null { $bottom: $top   };
  @if $right  == null { $right:  $top   };
  @return $top * $step $right * $step $bottom * $step $left * $step;
};